@page
@using Microsoft.IdentityModel.Tokens
@using StarColonies.Domains
@model StarColonies.Web.Pages.Comptoir

@{
    ViewData["Title"] = "Comptoir des ressources";
}

<div class="container-fluid py-4">
    <!-- Notification de succès ou d'erreur -->
    @if (!string.IsNullOrEmpty(Model.StatusMessage))
    {
        <div class="alert @(Model.StatusMessage.StartsWith("Erreur") ? "alert-danger" : "alert-success") alert-dismissible fade show" role="alert">
            @Model.StatusMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Si on vient d'une mission, afficher le lien de retour et la progression -->
    @if (!string.IsNullOrEmpty(Model.FromMission))
    {
        <div class="mb-4">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <a asp-page="/ConsultMission" asp-route-slug="@Model.FromMission" class="btn btn-primary">
                    <i class="fas fa-arrow-left me-2"></i> Retour à la mission @Model.CurrentMission.Name
                </a>

                @if (Model.TeamBonusAvailable)
                {
                    <div class="alert alert-success mb-0 py-2 px-3">
                        <i class="fas fa-star me-2"></i> Bonus d'équipe débloqué!
                    </div>
                }
            </div>

            <!-- Barre de progression -->
            <div class="p-3 bg-dark rounded">
                <h5 class="font-barlow text-white">Progression vers le bonus d'équipe</h5>
                <div class="d-flex align-items-center">
                    <div class="progress flex-grow-1 me-3" style="height: 25px;">
                        <div class="progress-bar bg-purple" role="progressbar"
                             style="width: @(Math.Min(Model.PurchaseCount, 5) * 20)%;"
                             aria-valuenow="@Math.Min(Model.PurchaseCount, 5)"
                             aria-valuemin="0"
                             aria-valuemax="5">
                            @Math.Min(Model.PurchaseCount, 5)/5
                        </div>
                    </div>
                    <div class="text-white font-barlow">
                        <i class="fas fa-level-up-alt me-1"></i> Niveau +1
                    </div>
                </div>
                <p class="text-muted small mt-2 mb-0">
                    @if (Model.TeamBonusAvailable)
                    {
                        <span class="text-success">
                            <i class="fas fa-check-circle me-1"></i>
                            Bonus d'équipe débloqué! Retournez à la mission pour l'utiliser.
                        </span>
                    }
                    else
                    {
                        <span>Achetez encore @(5 - Model.PurchaseCount) objet(s) pour obtenir une augmentation de niveau pour votre équipe!</span>
                    }
                </p>
            </div>
        </div>
    }

    <!-- Section Mes ressources -->
    <section class="mb-5">
        <h2 class="font-barlow text-white fw-bold mb-4">Mes ressources :</h2>

        <div class="d-flex flex-wrap gap-3">
            @if (Model.GroupedResources.Any())
            {
                foreach (var resourceGroup in Model.GroupedResources)
                {
                    <div class="bg-purple rounded p-2 d-flex align-items-center justify-content-center" style="min-width: 140px;">
                        <div class="bg-dark rounded-circle d-flex align-items-center justify-content-center me-3" style="width: 40px; height: 40px;">
                            @if (!string.IsNullOrEmpty(resourceGroup.IconUrl))
                            {
                                <img src="~/@resourceGroup.IconUrl" alt="@resourceGroup.Type" style="width: 25px; height: 25px;"/>
                            }
                        </div>
                        <div>
                            <span class="text-white font-barlow h4 m-0 d-block">x @resourceGroup.TotalQuantity</span>
                        </div>
                    </div>
                }
            }
            else
            {
                <p class="text-white">Aucune ressource disponible</p>
            }
        </div>
    </section>

    <!-- Section Objets disponibles -->
    <section class="mb-5">
        <h2 class="font-barlow text-white fw-bold mb-4">Objets disponibles :</h2>

        <div class="row g-4">
            @if (Model.Bonuses != null && Model.Bonuses.Any()) {
                foreach (var bonus in Model.Bonuses)
                {
                    var isActive = Model.ActiveBonusStatus[bonus.Id];
                    string cardClass = isActive ? "border-success" : "border-primary";

                    <div class="col-md-6 col-lg-4">
                        <div class="card h-100 bg-dark @cardClass border-1 rounded-3 shadow">
                            <div class="card-body p-4">
                                <div class="d-flex align-items-center mb-3">
                                    <div class="me-3">
                                        <img src="~/@bonus.IconUrl" alt="@bonus.Name" class="rounded-3" style="width: 50px; height: 50px;"/>
                                    </div>
                                    <div>
                                        <h5 class="font-barlow text-white fw-bold mb-0">@bonus.Name</h5>
                                        <div class="d-flex align-items-center small">
                                            @if (!isActive)
                                            {
                                                <i class="text-muted far fa-clock me-1"></i>
                                                <span class="text-muted">@Model.BonusDuration[bonus.Id]</span>
                                            }
                                        </div>
                                    </div>
                                </div>

                                <p class="small text-white mb-3">@bonus.Description</p>

                                <!-- Coût en ressources -->
                                <div class="d-flex flex-wrap gap-2 mb-3 justify-content-center rounded-3 @(isActive ? "visually-hidden" : "bg-purple")">
                                    @foreach (var ressource in @bonus.Resources)
                                    {
                                        <div class="d-flex align-items-center px-3 py-2">
                                            <div class="d-flex align-items-center justify-content-center me-2">
                                                @if (!string.IsNullOrEmpty(ressource.IconUrl))
                                                {
                                                    <img src="~/@ressource.IconUrl" alt="@ressource.ResourceType" class="bg-dark p-1 rounded-circle" style="width: 2rem; height: 2rem;"/>
                                                }
                                                else
                                                {
                                                    <i class="fas fa-flask text-info small"></i>
                                                }
                                            </div>
                                            <span class="text-white">x @ressource.Multiplier</span>
                                        </div>
                                    }
                                </div>

                                @if (isActive)
                                {
                                    <button type="button" class="btn btn-warning w-100" disabled>
                                        <span class="countdown-timer"
                                              data-expiration="@Model.ExpirationDates[bonus.Id].ToString("yyyy-MM-ddTHH:mm:ss")">
                                            Expire dans @Model.RemainingTime[bonus.Id]
                                        </span>
                                    </button>
                                }
                                else
                                {
                                    <form method="post" asp-page-handler="AcheterBonus">
                                        <input type="hidden" name="bonusId" value="@bonus.Id" />
                                        <input type="hidden" name="fromMission" value="@Model.FromMission" />
                                        <input type="hidden" name="currentCount" value="@Model.PurchaseCount" />
                                        <button type="submit" class="btn btn-purple w-100">ÉCHANGER</button>
                                    </form>
                                }
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="col-12">
                    <p class="text-white">Aucun bonus disponible</p>
                </div>
            }
        </div>
    </section>

    <!-- Section Historique des transactions -->
    <section class="mb-5">
        <h2 class="font-barlow text-white fw-bold mb-4">Historique d'achats :</h2>

        <div class="card bg-dark text-white border-0 shadow">
            <div class="card-header bg-purple">
                <div class="d-flex justify-content-between align-items-center">
                    <span class="font-barlow fw-bold">Derniers achats de bonus</span>
                </div>
            </div>
            <div class="card-body p-0">
                @if (Model.TransactionHistory.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-dark table-hover mb-0">
                            <thead>
                            <tr>
                                <th>Date</th>
                                <th>Bonus</th>
                                <th>Ressources utilisées</th>
                            </tr>
                            </thead>
                            <tbody>
                            @foreach (var transaction in Model.TransactionHistory)
                            {
                                <tr>
                                    <td>@transaction.TransactionDate.ToString("dd/MM/yyyy HH:mm")</td>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            @if (!string.IsNullOrEmpty(transaction.BonusIconUrl))
                                            {
                                                <img src="~/@transaction.BonusIconUrl" alt="@transaction.BonusName" class="rounded-3 me-2" style="width: 30px; height: 30px;"/>
                                            }
                                            <span>@transaction.BonusName</span>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="d-flex flex-wrap gap-2">
                                            @foreach (var resource in transaction.Resources)
                                            {
                                                <div class="d-flex align-items-center"
                                                     data-bs-toggle="tooltip"
                                                     data-bs-placement="top"
                                                     title="@resource.ResourceName">

                                                    @if (!string.IsNullOrEmpty(resource.IconUrl))
                                                    {
                                                        <img src="~/@resource.IconUrl"
                                                             alt="@resource.ResourceType"
                                                             class="bg-dark rounded-circle me-1"
                                                             style="width: 20px; height: 20px;" />
                                                    }
                                                    <span>x @resource.Quantite</span>
                                                </div>
                                            }
                                            @if (transaction.Resources.IsNullOrEmpty())
                                            {
                                                <span>Aucune</span>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="p-4 text-center">
                        <p class="mb-0">Aucun achat effectué pour le moment.</p>
                    </div>
                }
            </div>
        </div>
    </section>
</div>

@section Scripts {
    <script>
        // Modification de la fonction de mise à jour des compteurs
        function updateCountdownTimers() {
            const now = new Date();
            let needsReload = false;

            document.querySelectorAll('.countdown-timer').forEach(element => {
                try {
                    // Récupérer la date d'expiration depuis l'attribut data
                    const expirationDateStr = element.getAttribute('data-expiration');
                    // Vérification supplémentaire pour s'assurer que la date est valide
                    if (!expirationDateStr) {
                        console.error("Date d'expiration manquante");
                        return;
                    }

                    const expirationDate = new Date(expirationDateStr);

                    // Vérifier si la date est valide
                    if (isNaN(expirationDate.getTime())) {
                        console.error("Date d'expiration invalide:", expirationDateStr);
                        return;
                    }

                    // Calculer la différence en millisecondes
                    const diff = expirationDate - now;

                    // Si le bonus est expiré, marquer pour recharger la page une seule fois
                    if (diff <= 0) {
                        needsReload = true;
                        return;
                    }

                    // Calculer les jours, heures, minutes et secondes
                    const days = Math.floor(diff / (1000 * 60 * 60 * 24));
                    const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
                    const seconds = Math.floor((diff % (1000 * 60)) / 1000);

                    // Formater le texte du timer
                    let timeText = '';
                    if (days > 0) {
                        timeText = `${days}j ${hours}h`;
                    } else if (hours > 0) {
                        timeText = `${hours}h ${minutes}m`;
                    } else {
                        timeText = `${minutes}m ${seconds}s`;
                    }

                    // Mettre à jour le texte de l'élément
                    element.textContent = `Expire dans ${timeText}`;
                } catch (error) {
                    console.error("Erreur lors de la mise à jour du compteur:", error);
                }
            });

            // Recharger la page une seule fois si nécessaire, avec une variable pour empêcher les rechargements en boucle
            if (needsReload && !window.hasReloaded) {
                window.hasReloaded = true;
                window.location.reload();
            }
}

        // Vérifier si des timers existent avant d'initialiser
        if (document.querySelectorAll('.countdown-timer').length > 0) {
            // Initialiser la variable pour éviter les rechargements en boucle
            window.hasReloaded = false;

            // Mettre à jour les timers immédiatement, puis toutes les secondes
            updateCountdownTimers();
            setInterval(updateCountdownTimers, 1000);
        }
    </script>
}

@section Styles {
    <style>
        /* Style pour les ressources */
        .bg-quaternary-bg-color {
            background-color: var(--quaternary-bg-color);
        }

        /* Style pour les bonus actifs */
        .border-success {
            border-color: var(--special-color) !important;
            border-width: 2px !important;
        }

        .btn-warning:disabled {
            background: rgba(248, 213, 3, 0.32);
            border-color: var(--special-color);
            opacity: 1;
            padding: 1rem;
            color: #fff;
            font-weight: bold;
        }
    </style>
}