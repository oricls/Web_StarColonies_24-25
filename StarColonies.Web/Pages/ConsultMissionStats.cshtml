@page
@model StarColonies.Web.Pages.ConsultMissionStats
@{
    ViewData["Title"] = "Statistiques";
}
@await Html.PartialAsync("_StatsNavbar")
<div class="container mt-4">
    <div class="mb-5">
        <h3 class="text-white fw-bold mb-4">Sélectionner une équipe :</h3>
        <p class="text-white">Sélectionnez une équipe pour voir ses statistiques</p>
        <form method="post">
            <div class="text-danger mb-3"><validation-summary model-only="true"/></div>
            <div class="d-flex flex-wrap gap-3 mb-5">
                @if (!Model.UserTeams.Any())
                {
                    <p class="text-white">Aucune équipe disponible.</p>
                }
                else
                {
                    @foreach (var team in Model.UserTeams)
                    {
                        <div class="team-selector">
                            <input type="submit" asp-for="SelectedTeamId" value="@team.Id" id="team-@team.Id" class="visually-hidden"/>
                            <label for="team-@team.Id" class="team-card">
                                <div class="team-avatar">
                                    <img src="~/@team.Baniere" alt="@team.Name" class="img-fluid">
                                </div>
                                <div class="team-name">@team.Name</div>
                            </label>
                        </div>
                    }
                }
            </div>
        </form>
    </div>
        
    @if (Model.SelectedTeamId != 0)
    {
        <div class="row g-5 justify-content-center align-items-center">
            <div class="col-lg-10 col-md-12 d-flex flex-column gap-3">
                <div class="title-page hall-of-fame">
                    <h3 class="py-3 mb-0 text-center fw-bold font-barlow login-header">Historique des missions</h3>
                </div>

                @foreach (var mission in Model.HistoriqueMission)
                {
                    <div class="row g-4">
                        <div class="col-md-6">
                            <div class="card h-100 rounded-3 shadow" style="background: linear-gradient(to bottom, #1D1332, #3A2463); border: 1px solid #6751A3;">
                                <div class="card-body p-4 d-flex flex-column">
                                    <div class="d-flex justify-content-between align-items-start mb-3">
                                        <h3 class="font-barlow text-white fw-bold mb-0">@mission.Name</h3>
                                        <div class="bg-primary px-3 py-1 rounded">
                                            <span class="text-white fw-bold">Nv. @mission.Level</span>
                                        </div>
                                    </div>

                                    <p class="h6 opacity-75 text-white mb-4">@mission.Description</p>

                                    <div class="mb-4">
                                        <h4 class="font-barlow text-white mb-2">Monstres présents :</h4>
                                        <div class="d-flex">
                                            @foreach (var bestiaire in Model.DefisParMission[mission.Id])
                                            {
                                                <div class="me-2">
                                                    <img class="bg-primary rounded-circle d-flex align-items-center justify-content-center"
                                                         style="width: 40px; height: 40px; object-fit: cover;"
                                                         src="~/@bestiaire.TypeBestiaireAvatar"
                                                         alt="@bestiaire.Name"
                                                         title="@bestiaire.Name (@bestiaire.TypeBestiaireName)"/>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="col-lg-6 col-md-6">
                            <div class="sticky-top card bg-dark border-0 shadow">
                                <div class="card-body d-flex flex-column">
                                    <div class="mb-5 d-flex flex-column gap-4">
                                        <h2 class="font-barlow fw-bold text-center">Analyse de la mission</h2>
                                        <div class="row">
                                            <div class="col-6"><canvas id="single-mission-chart-@mission.Id" style="max-width: 150px; max-height: 150px;"></canvas></div>
                                            <div class="col-6"><canvas id="single-mission-issue-chart-@mission.Id" style="max-width: 250px; max-height: 250px;"></canvas></div>
                                        </div>
                                        <i class="fas fa-download nav-link-icon position-absolute bottom-0 end-0 m-2" id="downloadCharts" style="cursor: pointer;"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

<script type="text/javascript">
    var dataForSingleMission = @Html.Raw(Json.Serialize(Model.MissionData));

    document.addEventListener("DOMContentLoaded", function () {
        drawCharts();
        setupDownloadButton();
    });

    function drawCharts() {
        @foreach (var mission in Model.HistoriqueMission)
        {
            // par ia (gemini)
            @:singleMissionChart(@mission.Id);
            @:avgIssue(@mission.Id);
        }
    }

    function singleMissionChart(missionId) {
        const missionData = dataForSingleMission[missionId];
        const ctx = document.getElementById('single-mission-chart-' + missionId).getContext('2d');
        new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: ['Réussites', 'Échecs'],
                datasets: [{
                    data: [missionData.win, missionData.lose],
                    backgroundColor: ['#3B82F6', '#F8D503'],
                    borderWidth: 1
                }]
            },
        });
    }

    function avgIssue(missionId) {
        const missionData = dataForSingleMission[missionId];
        const ctx = document.getElementById('single-mission-issue-chart-' + missionId).getContext('2d');
        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: ['Avg strenght', 'Avg endurence'],
                datasets: [{
                    label: 'Total',
                    data: [missionData.issueEndurenceAvg, missionData.issueStrenghtAvg],
                    backgroundColor: ['#3B82F6'],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                backgroundColor: 'transparent',
                plugins: {
                    legend: {
                        labels: {
                            color: '#ffffff'
                        }
                    },
                    tooltip: {
                        mode: 'index',
                        intersect: false
                    }
                },
                scales: {
                    x: {
                        ticks: {
                            color: '#ffffff'
                        },
                        grid: {
                            color: 'rgba(255, 255, 255, 0.1)'
                        }
                    },
                    y: {
                        beginAtZero: true,
                        ticks: {
                            color: '#ffffff'
                        },
                        grid: {
                            color: 'rgba(255, 255, 255, 0.1)'
                        }
                    }
                }
            }
        });
    }

    /*function setupDownloadButton() {
        const downloadButton = document.getElementById('downloadChart');
        if (downloadButton) {
            downloadButton.addEventListener('click', download);
        }
    }
    function download(missionId) {
        const imgLink = document.createElement('a');
        const donutCanvas = document.getElementById('single-missino-chart-' + missionId);
        const barCanvas = document.getElementById('single-mission-issue-chart-' + missionId);
        
        imgLink.download = 'mission-donut-chart.png';
        imgLink.href = donutCanvas.toDataURL('image/png', 1);
        imgLink.href = barCanvas.toDataURL('image/png', 1);
        
        imgLink.click();
    }*/

    // par ia (gemini)
    function setupDownloadButton() {
        const missionSections = document.querySelectorAll('.row.g-4');

        missionSections.forEach(missionSection => {
            const missionId = missionSection.querySelector('[id^="single-mission-chart-"]').id.split('-').pop();
            const downloadIcon = missionSection.querySelector('.fa-download'); 

            if (downloadIcon) {
                downloadIcon.addEventListener('click', () => downloadAllCharts(missionId));
            }
        });
    }

    function downloadAllCharts(missionId) {
        const doughnutCanvas = document.getElementById('single-mission-chart-' + missionId);
        const barCanvas = document.getElementById('single-mission-issue-chart-' + missionId);

        downloadCanvas(doughnutCanvas, `mission-${missionId}-stats.png`);
        downloadCanvas(barCanvas, `mission-${missionId}-issues.png`);
    }

    function downloadCanvas(canvas, filename) {
        const link = document.createElement('a');
        link.download = filename;
        link.href = canvas.toDataURL('image/png', 1);
        link.click();
    }
</script>


@section Styles {
    <style>
    .font-barlow {
        font-family: 'Barlow Condensed', sans-serif;
    }

    .team-selector {
        position: relative;
    }

    .team-selector label {
        cursor: pointer;
        transition: all 0.3s ease;
        padding: 10px;
        border-radius: 10px;
    }

    .team-selector label:hover {
        transform: scale(1.05);
    }

    .team-selector input[type="radio"]:checked + label {
        border: 3px solid #5a49ab;
        box-shadow: 0 0 15px rgba(90, 73, 171, 0.8);
        transform: translateY(-5px) scale(1.05);
    }

    .team-card {
        width: 120px;
        min-height: 140px;
        background-color: #1d1935;
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        align-items: center;
        border-radius: 10px;
        overflow: visible;
        padding: 10px;
    }

    .team-card img {
        width: 80px;
        height: 80px;
        object-fit: cover;
        border-radius: 50%;
        margin-bottom: 8px;
        border: 2px solid transparent;
        transition: all 0.3s ease;
    }

    .team-selector input[type="radio"]:checked + label .team-card img {
        border-color: #5a49ab;
    }

    .team-name {
        white-space: normal;
        word-wrap: break-word;
        max-width: 100%;
        text-align: center;
        font-size: 0.9rem;
        line-height: 1.2;
        color: #fff;
    }
</style>
}