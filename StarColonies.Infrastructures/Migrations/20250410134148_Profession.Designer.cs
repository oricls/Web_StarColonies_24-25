// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StarColonies.Infrastructures;

#nullable disable

namespace StarColonies.Infrastructures.Migrations
{
    [DbContext(typeof(StarColoniesContext))]
    [Migration("20250410134148_Profession")]
    partial class Profession
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ColonResource", b =>
                {
                    b.Property<int>("ColonsId")
                        .HasColumnType("int");

                    b.Property<int>("ResourcesId")
                        .HasColumnType("int");

                    b.HasKey("ColonsId", "ResourcesId");

                    b.HasIndex("ResourcesId");

                    b.ToTable("ColonResource", (string)null);
                });

            modelBuilder.Entity("ColonTeam", b =>
                {
                    b.Property<int>("MembersId")
                        .HasColumnType("int");

                    b.Property<int>("TeamsId")
                        .HasColumnType("int");

                    b.HasKey("MembersId", "TeamsId");

                    b.HasIndex("TeamsId");

                    b.ToTable("TeamColon", (string)null);
                });

            modelBuilder.Entity("MissionBestiaire", b =>
                {
                    b.Property<int>("BestiaireId")
                        .HasColumnType("int");

                    b.Property<int>("MissionId")
                        .HasColumnType("int");

                    b.HasKey("BestiaireId", "MissionId");

                    b.HasIndex("MissionId");

                    b.ToTable("MissionBestiaire");

                    b.HasData(
                        new
                        {
                            BestiaireId = 1,
                            MissionId = 1
                        },
                        new
                        {
                            BestiaireId = 2,
                            MissionId = 1
                        },
                        new
                        {
                            BestiaireId = 3,
                            MissionId = 1
                        },
                        new
                        {
                            BestiaireId = 4,
                            MissionId = 1
                        },
                        new
                        {
                            BestiaireId = 5,
                            MissionId = 2
                        },
                        new
                        {
                            BestiaireId = 6,
                            MissionId = 2
                        },
                        new
                        {
                            BestiaireId = 7,
                            MissionId = 2
                        },
                        new
                        {
                            BestiaireId = 8,
                            MissionId = 2
                        },
                        new
                        {
                            BestiaireId = 9,
                            MissionId = 3
                        },
                        new
                        {
                            BestiaireId = 10,
                            MissionId = 3
                        },
                        new
                        {
                            BestiaireId = 11,
                            MissionId = 3
                        },
                        new
                        {
                            BestiaireId = 12,
                            MissionId = 3
                        },
                        new
                        {
                            BestiaireId = 13,
                            MissionId = 4
                        },
                        new
                        {
                            BestiaireId = 1,
                            MissionId = 4
                        },
                        new
                        {
                            BestiaireId = 2,
                            MissionId = 4
                        },
                        new
                        {
                            BestiaireId = 3,
                            MissionId = 4
                        },
                        new
                        {
                            BestiaireId = 4,
                            MissionId = 4
                        },
                        new
                        {
                            BestiaireId = 5,
                            MissionId = 4
                        });
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.ActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("ActivityLog");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityLogId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityLogId");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.Bestiaire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Endurance")
                        .HasColumnType("int");

                    b.Property<int>("IdTypeBestiaire")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdTypeBestiaire");

                    b.ToTable("Bestiaire");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Endurance = 2,
                            IdTypeBestiaire = 1,
                            Name = "Drone",
                            Strength = 2
                        },
                        new
                        {
                            Id = 2,
                            Endurance = 3,
                            IdTypeBestiaire = 2,
                            Name = "Anomalie",
                            Strength = 1
                        },
                        new
                        {
                            Id = 3,
                            Endurance = 12,
                            IdTypeBestiaire = 3,
                            Name = "Cryptoïde",
                            Strength = 4
                        },
                        new
                        {
                            Id = 4,
                            Endurance = 1,
                            IdTypeBestiaire = 4,
                            Name = "Spectre",
                            Strength = 7
                        },
                        new
                        {
                            Id = 5,
                            Endurance = 2,
                            IdTypeBestiaire = 1,
                            Name = "Nanobot",
                            Strength = 1
                        },
                        new
                        {
                            Id = 6,
                            Endurance = 3,
                            IdTypeBestiaire = 5,
                            Name = "Prédateur",
                            Strength = 4
                        },
                        new
                        {
                            Id = 7,
                            Endurance = 4,
                            IdTypeBestiaire = 6,
                            Name = "Chimère",
                            Strength = 4
                        },
                        new
                        {
                            Id = 8,
                            Endurance = 3,
                            IdTypeBestiaire = 3,
                            Name = "Titan",
                            Strength = 5
                        },
                        new
                        {
                            Id = 9,
                            Endurance = 11,
                            IdTypeBestiaire = 4,
                            Name = "Entité",
                            Strength = 5
                        },
                        new
                        {
                            Id = 10,
                            Endurance = 4,
                            IdTypeBestiaire = 7,
                            Name = "Mutant",
                            Strength = 2
                        },
                        new
                        {
                            Id = 11,
                            Endurance = 7,
                            IdTypeBestiaire = 3,
                            Name = "Leviathan",
                            Strength = 9
                        },
                        new
                        {
                            Id = 12,
                            Endurance = 20,
                            IdTypeBestiaire = 3,
                            Name = "Hégémon",
                            Strength = 20
                        },
                        new
                        {
                            Id = 13,
                            Endurance = 15,
                            IdTypeBestiaire = 1,
                            Name = "Drone de combat",
                            Strength = 10
                        });
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.Bonus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateHeureAchat")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateHeureValidite")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("IdColon")
                        .HasColumnType("int");

                    b.Property<int>("IdResource")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("QuantiteResource")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdColon");

                    b.HasIndex("IdResource");

                    b.ToTable("Bonus");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.Colon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("DateBirth")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Endurance")
                        .HasColumnType("int");

                    b.Property<int>("IdProfession")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("NameColon")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdProfession");

                    b.ToTable("Colon");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityLogId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateHeureAction")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequeteAction")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ResponseAction")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityLogId");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.Mission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Mission");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Une ancienne base de recherche abandonnée recèle des créatures étranges et des technologies perdues.",
                            Image = "base_abandonnee.jpg",
                            Name = "Exploration de la base abandonnée"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Un monstre marin légendaire menace les colonies côtières. Son élimination est primordiale.",
                            Image = "leviathan_abysses.jpg",
                            Name = "Chasse au Léviathan des abysses"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Des scientifiques sont piégés dans une zone contaminée par des créatures expérimentales.",
                            Image = "quarantaine_zone.jpg",
                            Name = "Sauvetage dans la zone de quarantaine"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Une entité extraterrestre intelligente a pris le contrôle d'un réacteur nucléaire.",
                            Image = "hegemon_reactor.jpg",
                            Name = "Désactivation du Hégémon"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Des créatures extraterrestres ont infesté d'anciennes ruines découvertes sur une lune lointaine.",
                            Image = "ruines_aliennes.jpg",
                            Name = "Nettoyage des ruines aliennes"
                        });
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.Profession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Icone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Profession");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Un ingénieur est une personne qui conçoit et construit des machines.",
                            Icone = "engineer.png",
                            Name = "Ingénieur"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Un médecin est une personne qui soigne les maladies.",
                            Icone = "doctor.png",
                            Name = "Médecin"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Un scientifique est une personne qui étudie la science.",
                            Icone = "scientist.png",
                            Name = "Scientifique"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Un soldat est une personne qui combat pour son pays.",
                            Icone = "soldier.png",
                            Name = "Soldat"
                        });
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("IdTypeResource")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("IdTypeResource");

                    b.ToTable("Resource");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.ResultatMission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IdMission")
                        .HasColumnType("int");

                    b.Property<int>("IdTeam")
                        .HasColumnType("int");

                    b.Property<int>("Issue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdMission");

                    b.HasIndex("IdTeam");

                    b.ToTable("ResultatMission");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Baniere")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("IdColonCreator")
                        .HasColumnType("int");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("IdColonCreator");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.TypeBestiaire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TypeBestiaire");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Avatar = "Avatar1.png",
                            Description = "Créations mécaniques ou cybernétiques, souvent conçues pour des tâches spécifiques. Peuvent aller des assistants domestiques aux machines de guerre autonomes.",
                            Name = "Robot"
                        },
                        new
                        {
                            Id = 2,
                            Avatar = "Avatar2.png",
                            Description = "Êtres organiques issus de l'évolution naturelle, parfaitement adaptés à leur écosystème. Inclut les créatures des forêts, des océans et autres habitats terrestres.",
                            Name = "Naturelle"
                        },
                        new
                        {
                            Id = 3,
                            Avatar = "Avatar3.png",
                            Description = "Formes de vie originaires d'autres planètes ou dimensions, possédant souvent des caractéristiques biologiques exotiques et des capacités inexplicables.",
                            Name = "Extraterrestre"
                        },
                        new
                        {
                            Id = 4,
                            Avatar = "Avatar4.png",
                            Description = "Entités défiant les lois de la physique, souvent liées à des phénomènes spirituels ou énigmatiques. Inclut fantômes, esprits et créatures dimensionnelles.",
                            Name = "Paranormal"
                        },
                        new
                        {
                            Id = 5,
                            Avatar = "Avatar5.png",
                            Description = "Espèces animales terrestres, qu'elles soient communes ou rares. Peuvent inclure des variants évolués ou génétiquement modifiés.",
                            Name = "Animal"
                        },
                        new
                        {
                            Id = 6,
                            Avatar = "Avatar6.png",
                            Description = "Résultats d'expérimentations scientifiques ou magiques, combinant souvent des traits de multiples espèces. Créatures instables aux capacités imprévisibles.",
                            Name = "Expérience"
                        },
                        new
                        {
                            Id = 7,
                            Avatar = "Avatar7.png",
                            Description = "Êtres bipèdes à morphologie semblable aux humains, qu'ils soient d'origine naturelle ou artificielle. Peuvent posséder une intelligence avancée et une société structurée.",
                            Name = "Humanoïde"
                        });
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.TypeResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TypeResource");
                });

            modelBuilder.Entity("ColonResource", b =>
                {
                    b.HasOne("StarColonies.Infrastructures.Entities.Colon", null)
                        .WithMany()
                        .HasForeignKey("ColonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StarColonies.Infrastructures.Entities.Resource", null)
                        .WithMany()
                        .HasForeignKey("ResourcesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ColonTeam", b =>
                {
                    b.HasOne("StarColonies.Infrastructures.Entities.Colon", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StarColonies.Infrastructures.Entities.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MissionBestiaire", b =>
                {
                    b.HasOne("StarColonies.Infrastructures.Entities.Bestiaire", null)
                        .WithMany()
                        .HasForeignKey("BestiaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StarColonies.Infrastructures.Entities.Mission", null)
                        .WithMany()
                        .HasForeignKey("MissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.Admin", b =>
                {
                    b.HasOne("StarColonies.Infrastructures.Entities.ActivityLog", "ActivityLog")
                        .WithMany("Admins")
                        .HasForeignKey("ActivityLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityLog");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.Bestiaire", b =>
                {
                    b.HasOne("StarColonies.Infrastructures.Entities.TypeBestiaire", "TypeBestiaire")
                        .WithMany("Bestiaire")
                        .HasForeignKey("IdTypeBestiaire")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TypeBestiaire");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.Bonus", b =>
                {
                    b.HasOne("StarColonies.Infrastructures.Entities.Colon", "Colon")
                        .WithMany("Bonuses")
                        .HasForeignKey("IdColon")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StarColonies.Infrastructures.Entities.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("IdResource")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Colon");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.Colon", b =>
                {
                    b.HasOne("StarColonies.Infrastructures.Entities.Profession", "Profession")
                        .WithMany()
                        .HasForeignKey("IdProfession")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Profession");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.Log", b =>
                {
                    b.HasOne("StarColonies.Infrastructures.Entities.ActivityLog", "ActivityLog")
                        .WithMany("Logs")
                        .HasForeignKey("ActivityLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityLog");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.Resource", b =>
                {
                    b.HasOne("StarColonies.Infrastructures.Entities.TypeResource", "TypeResource")
                        .WithMany("Resources")
                        .HasForeignKey("IdTypeResource")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeResource");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.ResultatMission", b =>
                {
                    b.HasOne("StarColonies.Infrastructures.Entities.Mission", "Mission")
                        .WithMany("ResultatMissions")
                        .HasForeignKey("IdMission")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StarColonies.Infrastructures.Entities.Team", "Team")
                        .WithMany("ResultatMissions")
                        .HasForeignKey("IdTeam")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mission");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.Team", b =>
                {
                    b.HasOne("StarColonies.Infrastructures.Entities.Colon", "ColonCreator")
                        .WithMany()
                        .HasForeignKey("IdColonCreator")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ColonCreator");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.ActivityLog", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("Logs");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.Colon", b =>
                {
                    b.Navigation("Bonuses");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.Mission", b =>
                {
                    b.Navigation("ResultatMissions");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.Team", b =>
                {
                    b.Navigation("ResultatMissions");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.TypeBestiaire", b =>
                {
                    b.Navigation("Bestiaire");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.TypeResource", b =>
                {
                    b.Navigation("Resources");
                });
#pragma warning restore 612, 618
        }
    }
}
