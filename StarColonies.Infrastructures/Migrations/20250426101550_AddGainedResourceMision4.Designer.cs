// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StarColonies.Infrastructures;

#nullable disable

namespace StarColonies.Infrastructures.Migrations
{
    [DbContext(typeof(StarColoniesContext))]
    [Migration("20250426101550_AddGainedResourceMision4")]
    partial class AddGainedResourceMision4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ColonTeam", b =>
                {
                    b.Property<string>("MembersId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TeamsId")
                        .HasColumnType("int");

                    b.HasKey("MembersId", "TeamsId");

                    b.HasIndex("TeamsId");

                    b.ToTable("TeamColon", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ALTAD01-04-24 10:30:00Admin",
                            ConcurrencyStamp = "ALTAD01-04-24 10:30:00Admin",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.Bestiaire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Endurance")
                        .HasColumnType("int");

                    b.Property<int>("IdTypeBestiaire")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdTypeBestiaire");

                    b.ToTable("Bestiaire");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Endurance = 2,
                            IdTypeBestiaire = 1,
                            Name = "Drone",
                            Strength = 2
                        },
                        new
                        {
                            Id = 2,
                            Endurance = 3,
                            IdTypeBestiaire = 2,
                            Name = "Anomalie",
                            Strength = 1
                        },
                        new
                        {
                            Id = 3,
                            Endurance = 12,
                            IdTypeBestiaire = 3,
                            Name = "Cryptoïde",
                            Strength = 4
                        },
                        new
                        {
                            Id = 4,
                            Endurance = 1,
                            IdTypeBestiaire = 4,
                            Name = "Spectre",
                            Strength = 7
                        },
                        new
                        {
                            Id = 5,
                            Endurance = 2,
                            IdTypeBestiaire = 1,
                            Name = "Nanobot",
                            Strength = 1
                        },
                        new
                        {
                            Id = 6,
                            Endurance = 3,
                            IdTypeBestiaire = 5,
                            Name = "Prédateur",
                            Strength = 4
                        },
                        new
                        {
                            Id = 7,
                            Endurance = 4,
                            IdTypeBestiaire = 6,
                            Name = "Chimère",
                            Strength = 4
                        },
                        new
                        {
                            Id = 8,
                            Endurance = 3,
                            IdTypeBestiaire = 3,
                            Name = "Titan",
                            Strength = 5
                        },
                        new
                        {
                            Id = 9,
                            Endurance = 11,
                            IdTypeBestiaire = 4,
                            Name = "Entité",
                            Strength = 5
                        },
                        new
                        {
                            Id = 10,
                            Endurance = 4,
                            IdTypeBestiaire = 7,
                            Name = "Mutant",
                            Strength = 2
                        },
                        new
                        {
                            Id = 11,
                            Endurance = 7,
                            IdTypeBestiaire = 3,
                            Name = "Leviathan",
                            Strength = 9
                        },
                        new
                        {
                            Id = 12,
                            Endurance = 20,
                            IdTypeBestiaire = 3,
                            Name = "Hégémon",
                            Strength = 20
                        },
                        new
                        {
                            Id = 13,
                            Endurance = 15,
                            IdTypeBestiaire = 1,
                            Name = "Drone de combat",
                            Strength = 10
                        });
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.Bonus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<TimeSpan>("DureeParDefaut")
                        .HasColumnType("time");

                    b.Property<int>("EffectTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Bonus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Augmente temporairement la force de tous les membres d'une équipe",
                            DureeParDefaut = new TimeSpan(0, 0, 5, 0, 0),
                            EffectTypeId = 1,
                            IconUrl = "assets/icons/potion.png",
                            Name = "Potion de force"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Investit un soldat supplémentaire pour les prochaines missions",
                            DureeParDefaut = new TimeSpan(0, 0, 3, 0, 0),
                            EffectTypeId = 3,
                            IconUrl = "assets/icons/potion.png",
                            Name = "Coup de pouce"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Augmente temporairement l'endurance de tous les membres d'une équipe",
                            DureeParDefaut = new TimeSpan(0, 0, 5, 0, 0),
                            EffectTypeId = 2,
                            IconUrl = "assets/icons/potion.png",
                            Name = "Potion d'endurance"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Double le nombre de ressources obtenues",
                            DureeParDefaut = new TimeSpan(0, 0, 1, 0, 0),
                            EffectTypeId = 4,
                            IconUrl = "assets/icons/potion.png",
                            Name = "Grâce de Midas"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Augmente l'expérience gagnée et permet de gagner un niveau supplémentaire à chaque mission",
                            DureeParDefaut = new TimeSpan(0, 0, 20, 0, 0),
                            EffectTypeId = 5,
                            IconUrl = "assets/icons/potion.png",
                            Name = "Parchemin de monsieur Swinnen"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Elimine instantanément tous les ministres",
                            DureeParDefaut = new TimeSpan(0, 1, 40, 0, 0),
                            EffectTypeId = 0,
                            IconUrl = "assets/icons/potion.png",
                            Name = "L'item trop cheatés"
                        });
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.BonusResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BonusId")
                        .HasColumnType("int");

                    b.Property<int>("Quantite")
                        .HasColumnType("int");

                    b.Property<int>("ResourceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.HasIndex("BonusId", "ResourceId");

                    b.ToTable("BonusResource");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.BonusTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BonusId")
                        .HasColumnType("int");

                    b.Property<string>("ColonId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BonusId");

                    b.HasIndex("ColonId");

                    b.ToTable("BonusTransaction");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.BonusTransactionResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BonusResourceId")
                        .HasColumnType("int");

                    b.Property<int>("Quantite")
                        .HasColumnType("int");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BonusResourceId");

                    b.HasIndex("TransactionId");

                    b.ToTable("BonusTransactionResource");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.Colon", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateBirth")
                        .HasMaxLength(20)
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Endurance")
                        .HasColumnType("int");

                    b.Property<int>("IdProfession")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("IdProfession");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.ColonBonus", b =>
                {
                    b.Property<string>("ColonId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BonusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAchat")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateExpiration")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("ColonId", "BonusId");

                    b.HasIndex("BonusId");

                    b.ToTable("ColonBonus");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.ColonResource", b =>
                {
                    b.Property<string>("ColonId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ResourceId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("ColonId", "ResourceId");

                    b.HasIndex("ResourceId");

                    b.ToTable("ColonResource", (string)null);
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateHeureAction")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequeteAction")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ResponseAction")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.Mission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Mission");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Une ancienne base de recherche abandonnée recèle des créatures étranges et des technologies perdues.",
                            Image = "base_abandonnee.jpg",
                            Name = "Exploration de la base abandonnée"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Un monstre marin légendaire menace les colonies côtières. Son élimination est primordiale.",
                            Image = "leviathan_abysses.jpg",
                            Name = "Chasse au Léviathan des abysses"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Des scientifiques sont piégés dans une zone contaminée par des créatures expérimentales.",
                            Image = "quarantaine_zone.jpg",
                            Name = "Sauvetage dans la zone de quarantaine"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Une entité extraterrestre intelligente a pris le contrôle d'un réacteur nucléaire.",
                            Image = "hegemon_reactor.jpg",
                            Name = "Désactivation du Hégémon"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Des créatures extraterrestres ont infesté d'anciennes ruines découvertes sur une lune lointaine.",
                            Image = "ruines_aliennes.jpg",
                            Name = "Nettoyage des ruines aliennes"
                        });
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.MissionBestiaire", b =>
                {
                    b.Property<int>("IdMission")
                        .HasColumnType("int");

                    b.Property<int>("IdBestiaire")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("IdMission", "IdBestiaire");

                    b.HasIndex("IdBestiaire");

                    b.ToTable("MissionBestiaire");

                    b.HasData(
                        new
                        {
                            IdMission = 1,
                            IdBestiaire = 1,
                            Id = 0
                        },
                        new
                        {
                            IdMission = 1,
                            IdBestiaire = 2,
                            Id = 0
                        },
                        new
                        {
                            IdMission = 1,
                            IdBestiaire = 3,
                            Id = 0
                        },
                        new
                        {
                            IdMission = 1,
                            IdBestiaire = 4,
                            Id = 0
                        },
                        new
                        {
                            IdMission = 2,
                            IdBestiaire = 5,
                            Id = 0
                        },
                        new
                        {
                            IdMission = 2,
                            IdBestiaire = 6,
                            Id = 0
                        },
                        new
                        {
                            IdMission = 2,
                            IdBestiaire = 7,
                            Id = 0
                        },
                        new
                        {
                            IdMission = 2,
                            IdBestiaire = 8,
                            Id = 0
                        },
                        new
                        {
                            IdMission = 3,
                            IdBestiaire = 9,
                            Id = 0
                        },
                        new
                        {
                            IdMission = 3,
                            IdBestiaire = 10,
                            Id = 0
                        },
                        new
                        {
                            IdMission = 3,
                            IdBestiaire = 11,
                            Id = 0
                        },
                        new
                        {
                            IdMission = 3,
                            IdBestiaire = 12,
                            Id = 0
                        },
                        new
                        {
                            IdMission = 4,
                            IdBestiaire = 13,
                            Id = 0
                        },
                        new
                        {
                            IdMission = 4,
                            IdBestiaire = 1,
                            Id = 0
                        },
                        new
                        {
                            IdMission = 4,
                            IdBestiaire = 2,
                            Id = 0
                        },
                        new
                        {
                            IdMission = 4,
                            IdBestiaire = 3,
                            Id = 0
                        },
                        new
                        {
                            IdMission = 4,
                            IdBestiaire = 4,
                            Id = 0
                        },
                        new
                        {
                            IdMission = 4,
                            IdBestiaire = 5,
                            Id = 0
                        });
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.MissionResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdMission")
                        .HasColumnType("int");

                    b.Property<int>("IdRessource")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasAlternateKey("IdMission", "IdRessource");

                    b.HasIndex("IdRessource");

                    b.ToTable("MissionResources", (string)null);
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.Profession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Icone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Profession");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Un ingénieur est une personne qui conçoit et construit des machines.",
                            Icone = "avatars/engineer.png",
                            Name = "Ingénieur"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Un médecin est une personne qui soigne les maladies.",
                            Icone = "avatars/doctor.png",
                            Name = "Médecin"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Un scientifique est une personne qui étudie la science.",
                            Icone = "avatars/scientist.png",
                            Name = "Scientifique"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Un soldat est une personne qui combat pour son pays.",
                            Icone = "avatars/soldier.png",
                            Name = "Soldat"
                        });
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("IdTypeResource")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("IdTypeResource");

                    b.ToTable("Resource");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Matériau de protection léger",
                            IdTypeResource = 1,
                            Name = "Elindage léger"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Technologie de stockage d'énergie",
                            IdTypeResource = 2,
                            Name = "Batterie compacte"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Composant technologique avancé",
                            IdTypeResource = 2,
                            Name = "Module quantique"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Matériau haute résistance",
                            IdTypeResource = 1,
                            Name = "Nanofibres"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Matériau de protection renforcé",
                            IdTypeResource = 1,
                            Name = "Elindage renforcé"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Arme technologique",
                            IdTypeResource = 2,
                            Name = "Mitraillette"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Artefact mystérieux",
                            IdTypeResource = 3,
                            Name = "Gros crâne d'Alex"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Matériau suspect",
                            IdTypeResource = 1,
                            Name = "Residus louches"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Substance consommable dégradée",
                            IdTypeResource = 5,
                            Name = "Vinade avariée"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Matériau provenant de dents animales",
                            IdTypeResource = 1,
                            Name = "Crocs tranchants"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Substance consommable bioluminescente",
                            IdTypeResource = 5,
                            Name = "Sang fluorescent"
                        },
                        new
                        {
                            Id = 12,
                            Description = "Connaissance génétique",
                            IdTypeResource = 4,
                            Name = "ADN cryptoïen"
                        },
                        new
                        {
                            Id = 13,
                            Description = "Artefact de protection massive",
                            IdTypeResource = 3,
                            Name = "Enorme casque"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Boisson consommable",
                            IdTypeResource = 5,
                            Name = "Petite bière"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Matériau de protection naturelle",
                            IdTypeResource = 1,
                            Name = "Ecaille solide"
                        },
                        new
                        {
                            Id = 16,
                            Description = "Substance consommable dangereuse",
                            IdTypeResource = 5,
                            Name = "Venin mortel"
                        },
                        new
                        {
                            Id = 17,
                            Description = "Artefact énigmatique",
                            IdTypeResource = 3,
                            Name = "Cœur de l'Hégémon"
                        },
                        new
                        {
                            Id = 18,
                            Description = "Connaissance stratégique",
                            IdTypeResource = 4,
                            Name = "Plan d'attaque"
                        },
                        new
                        {
                            Id = 19,
                            Description = "Matériau spectral",
                            IdTypeResource = 1,
                            Name = "Membrane fantomique"
                        },
                        new
                        {
                            Id = 20,
                            Description = "Connaissance extrasensorielle",
                            IdTypeResource = 4,
                            Name = "Clairevoyance"
                        });
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.ResultatMission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<int>("IdMission")
                        .HasColumnType("int");

                    b.Property<int>("IdTeam")
                        .HasColumnType("int");

                    b.Property<double>("IssueEndurance")
                        .HasColumnType("float");

                    b.Property<double>("IssueStrength")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("IdMission");

                    b.HasIndex("IdTeam");

                    b.ToTable("ResultatMission");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Baniere")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("IdColonCreator")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("IdColonCreator");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.TypeBestiaire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TypeBestiaire");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Avatar = "Avatar1.png",
                            Description = "Créations mécaniques ou cybernétiques, souvent conçues pour des tâches spécifiques. Peuvent aller des assistants domestiques aux machines de guerre autonomes.",
                            Name = "Robot"
                        },
                        new
                        {
                            Id = 2,
                            Avatar = "icons/naturelle.png",
                            Description = "Êtres organiques issus de l'évolution naturelle, parfaitement adaptés à leur écosystème. Inclut les créatures des forêts, des océans et autres habitats terrestres.",
                            Name = "Naturelle"
                        },
                        new
                        {
                            Id = 3,
                            Avatar = "icons/extraterrestre.png",
                            Description = "Formes de vie originaires d'autres planètes ou dimensions, possédant souvent des caractéristiques biologiques exotiques et des capacités inexplicables.",
                            Name = "Extraterrestre"
                        },
                        new
                        {
                            Id = 4,
                            Avatar = "icons/paranormal.png",
                            Description = "Entités défiant les lois de la physique, souvent liées à des phénomènes spirituels ou énigmatiques. Inclut fantômes, esprits et créatures dimensionnelles.",
                            Name = "Paranormal"
                        },
                        new
                        {
                            Id = 5,
                            Avatar = "icons/animal.png",
                            Description = "Espèces animales terrestres, qu'elles soient communes ou rares. Peuvent inclure des variants évolués ou génétiquement modifiés.",
                            Name = "Animal"
                        },
                        new
                        {
                            Id = 6,
                            Avatar = "icons/experience.png",
                            Description = "Résultats d'expérimentations scientifiques ou magiques, combinant souvent des traits de multiples espèces. Créatures instables aux capacités imprévisibles.",
                            Name = "Expérience"
                        },
                        new
                        {
                            Id = 7,
                            Avatar = "icons/humanoide.png",
                            Description = "Êtres bipèdes à morphologie semblable aux humains, qu'ils soient d'origine naturelle ou artificielle. Peuvent posséder une intelligence avancée et une société structurée.",
                            Name = "Humanoïde"
                        });
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.TypeResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TypeResource");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Matériau de construction",
                            Icon = "icons/materiau.png",
                            Name = "Matériau"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Technologie avancée",
                            Icon = "icons/technologie.png",
                            Name = "Technologie"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Artefact ancien",
                            Icon = "icons/artefact.png",
                            Name = "Artefact"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Connaissance avancée",
                            Icon = "icons/connaissance.png",
                            Name = "Connaissance"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Consomable de base",
                            Icon = "icons/consomable.png",
                            Name = "Consomable"
                        });
                });

            modelBuilder.Entity("ColonTeam", b =>
                {
                    b.HasOne("StarColonies.Infrastructures.Entities.Colon", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StarColonies.Infrastructures.Entities.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("StarColonies.Infrastructures.Entities.Colon", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("StarColonies.Infrastructures.Entities.Colon", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StarColonies.Infrastructures.Entities.Colon", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("StarColonies.Infrastructures.Entities.Colon", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.Bestiaire", b =>
                {
                    b.HasOne("StarColonies.Infrastructures.Entities.TypeBestiaire", "TypeBestiaire")
                        .WithMany("Bestiaire")
                        .HasForeignKey("IdTypeBestiaire")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TypeBestiaire");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.BonusResource", b =>
                {
                    b.HasOne("StarColonies.Infrastructures.Entities.Bonus", "Bonus")
                        .WithMany("BonusResources")
                        .HasForeignKey("BonusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StarColonies.Infrastructures.Entities.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bonus");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.BonusTransaction", b =>
                {
                    b.HasOne("StarColonies.Infrastructures.Entities.Bonus", "Bonus")
                        .WithMany()
                        .HasForeignKey("BonusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StarColonies.Infrastructures.Entities.Colon", "Colon")
                        .WithMany()
                        .HasForeignKey("ColonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bonus");

                    b.Navigation("Colon");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.BonusTransactionResource", b =>
                {
                    b.HasOne("StarColonies.Infrastructures.Entities.BonusResource", "BonusResource")
                        .WithMany()
                        .HasForeignKey("BonusResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StarColonies.Infrastructures.Entities.BonusTransaction", "Transaction")
                        .WithMany("TransactionResources")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BonusResource");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.Colon", b =>
                {
                    b.HasOne("StarColonies.Infrastructures.Entities.Profession", "Profession")
                        .WithMany()
                        .HasForeignKey("IdProfession")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Profession");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.ColonBonus", b =>
                {
                    b.HasOne("StarColonies.Infrastructures.Entities.Bonus", "Bonus")
                        .WithMany("ColonBonuses")
                        .HasForeignKey("BonusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StarColonies.Infrastructures.Entities.Colon", "Colon")
                        .WithMany("ColonBonuses")
                        .HasForeignKey("ColonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bonus");

                    b.Navigation("Colon");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.ColonResource", b =>
                {
                    b.HasOne("StarColonies.Infrastructures.Entities.Colon", "Colon")
                        .WithMany("ColonResources")
                        .HasForeignKey("ColonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StarColonies.Infrastructures.Entities.Resource", "Resource")
                        .WithMany("ColonResources")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Colon");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.MissionBestiaire", b =>
                {
                    b.HasOne("StarColonies.Infrastructures.Entities.Bestiaire", "Bestiaire")
                        .WithMany("MissionBestiaires")
                        .HasForeignKey("IdBestiaire")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StarColonies.Infrastructures.Entities.Mission", "Mission")
                        .WithMany("MissionBestiaires")
                        .HasForeignKey("IdMission")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bestiaire");

                    b.Navigation("Mission");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.MissionResource", b =>
                {
                    b.HasOne("StarColonies.Infrastructures.Entities.Mission", "Mission")
                        .WithMany("GainedResources")
                        .HasForeignKey("IdMission")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StarColonies.Infrastructures.Entities.Resource", "Ressource")
                        .WithMany()
                        .HasForeignKey("IdRessource")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Mission");

                    b.Navigation("Ressource");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.Resource", b =>
                {
                    b.HasOne("StarColonies.Infrastructures.Entities.TypeResource", "TypeResource")
                        .WithMany("Resources")
                        .HasForeignKey("IdTypeResource")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeResource");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.ResultatMission", b =>
                {
                    b.HasOne("StarColonies.Infrastructures.Entities.Mission", "Mission")
                        .WithMany("ResultatMissions")
                        .HasForeignKey("IdMission")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StarColonies.Infrastructures.Entities.Team", "Team")
                        .WithMany("ResultatMissions")
                        .HasForeignKey("IdTeam")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mission");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.Team", b =>
                {
                    b.HasOne("StarColonies.Infrastructures.Entities.Colon", "ColonCreator")
                        .WithMany()
                        .HasForeignKey("IdColonCreator")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ColonCreator");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.Bestiaire", b =>
                {
                    b.Navigation("MissionBestiaires");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.Bonus", b =>
                {
                    b.Navigation("BonusResources");

                    b.Navigation("ColonBonuses");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.BonusTransaction", b =>
                {
                    b.Navigation("TransactionResources");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.Colon", b =>
                {
                    b.Navigation("ColonBonuses");

                    b.Navigation("ColonResources");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.Mission", b =>
                {
                    b.Navigation("GainedResources");

                    b.Navigation("MissionBestiaires");

                    b.Navigation("ResultatMissions");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.Resource", b =>
                {
                    b.Navigation("ColonResources");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.Team", b =>
                {
                    b.Navigation("ResultatMissions");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.TypeBestiaire", b =>
                {
                    b.Navigation("Bestiaire");
                });

            modelBuilder.Entity("StarColonies.Infrastructures.Entities.TypeResource", b =>
                {
                    b.Navigation("Resources");
                });
#pragma warning restore 612, 618
        }
    }
}
